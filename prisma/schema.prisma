// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum webinarStatusEnum {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum ctaTypeEnum {
  BUY_NOW
  BOOK_A_CALL
}

enum AttendanceTypeEnum {
  ATTENDED
  ADDED_TO_CART
  FOLLOW_UP
  BREAKOUT_ROOM
  COVERED
  REGISTERED
}

enum CallStatusEnum {
  PENDING
  COMPLETED
  InProgress
}

model User{
  id            String @id @default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name          String @db.VarChar(100)
  clerkId      String @unique
  email         String @unique
  profileImage  String
  webinars      webinar[]  @relation("PresenterWebinars")
  stripeConnectId  String? @db.VarChar(100)
  LastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  Subscriptions  Boolean @default(false)
  stripeCustomerId String? @db.VarChar(100)

  

  @@index([email])
  @@index([clerkId])

}


model webinar {
  id            String @id @default(dbgenerated("gen_random_uuid()"))@db.Uuid
  title         String @db.VarChar(100)
  description   String @db.Text
  startTime     DateTime?
  endTime       DateTime?
  duration     Int   @default(0)
  webinarStatus webinarStatusEnum @default(SCHEDULED)
  presenterId   String @db.Uuid
  presenter     User @relation("PresenterWebinars", fields: [presenterId], references: [id], onDelete: Cascade)
  attendances   Attendance[]
  tags          String[] 
  ctaLabel     String? @db.VarChar(100)
  ctaType       ctaTypeEnum
  ctaUrl    String? @db.VarChar(255)
  couponCode   String? @db.VarChar(100)
  couponEnabled Boolean @default(false)
  couponExpiry DateTime?
  lockChat Boolean @default(false)
  stripeProductId String? @db.VarChar(100)
  aiAgentId String? @db.Uuid
  priceId String? @db.VarChar(100)
  recordingUrl String? 
  thumbnailUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  Attendee Attendee?   @relation(fields: [attendeeId], references: [id])
  attendeeId String? @db.Uuid



  

  @@index([presenterId])
  @@index([aiAgentId])
  @@index([startTime])
}


model Attendee{
  id        String @id @default(dbgenerated("gen_random_uuid()"))@db.Uuid
  email     String @unique
  name      String @db.VarChar(100)
  callStatus CallStatusEnum @default(PENDING)
  Attendances Attendance[]
  webinars webinar[]
}


model Attendance{
  id          String  @id @default(dbgenerated("gen_random_uuid()"))@db.Uuid
  webinarId   String @db.Uuid
  joinedAt    DateTime @default(now())
  leftAt      DateTime?
  user        Attendee     @relation(fields:[attendeeId], references: [id])
  webinar     webinar @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  attendeeId  String @db.Uuid
  attendedType   AttendanceTypeEnum
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String @db.Uuid


  @@unique([attendeeId, webinarId])
  @@index([webinarId])
  @@index([attendedType])

}